# Generated by Selenium IDE
import pytest
import time
import json
import argparse
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
import time
from selenium.webdriver.chrome.options import Options

import urllib
import urllib.request as request
from bs4 import BeautifulSoup
import time
import yagmail
import logging
import random

def log(*msg):
    msg = "\t".join([str(m) for m in msg])
    logging.info(msg)
    print(msg)

def log_params(params):
    msg = "Parameters:\t"
    for (k, v) in params.items():
        msg = msg + k + ":" + str(v) + "\t"
    log(msg)


yag = yagmail.SMTP('mailxxx@163.com', 'password',host='smtp.163.com')

class Test2():
  def setup_method(self, method):
    chrome_options=Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--disable-gpu')
    self.driver = webdriver.Chrome(executable_path="xxxx/chromedriver",
    options=chrome_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_2(self):
    # Test name: 选课2
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("http://yjs.ustc.edu.cn/")
    # 2 | setWindowSize | 1792x1009 | 
    self.driver.set_window_size(1792, 1009)
    # 3 | click | css=.bg0 | 
    self.driver.find_element(By.CSS_SELECTOR, ".bg0").click()

    self.driver.find_element(By.ID, "username").send_keys("username")
    self.driver.find_element(By.ID, "password").send_keys("password")
    # 8 | type | id=username | SA18011029
    # 4 | click | id=login | 
    self.driver.find_element(By.ID, "login").click()
    # 5 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 6 | click | linkText=选课与成绩 | 
    self.driver.find_element(By.LINK_TEXT, "选课与成绩").click()
    # 7 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 8 | selectFrame | index=1 | 
    self.driver.switch_to.frame(1)
    # 9 | click | id=mm_2 | 
    self.vars["window_handles"] = self.driver.window_handles
    # 10 | selectWindow | handle=${win8123} | 
    self.driver.find_element(By.ID, "mm_2").click()
    # 11 | click | linkText=进入选课 | 
    self.vars["win8123"] = self.wait_for_window(2000)
    # 12 | selectWindow | handle=${win2505} | 
    self.driver.switch_to.window(self.vars["win8123"])
    # 13 | click | css=.open-department .filter-option | 
    self.vars["window_handles"] = self.driver.window_handles
    # 14 | click | linkText=018：外语系 | 
    self.driver.find_element(By.LINK_TEXT, "进入选课").click()
    # 15 | addSelection | css=.open-department:nth-child(2) | label=018：外语系
        # 21 | type | id=global_filter | 日常交流
    self.vars["win2848"] = self.wait_for_window(2000)
    # 22 | click | css=#all-lessons-table_next > .page-link | 
    self.driver.switch_to.window(self.vars["win2848"])
    # 23 | click | css=#all-lessons-table_next > .page-link | 
    self.driver.find_element(By.CSS_SELECTOR, ".open-department .filter-option").click()
    # 24 | click | css=.odd:nth-child(1) .btn | 
    self.driver.find_element(By.ID, "global_filter").click()
    # 25 | click | css=.add-response .close-modal | 
    self.driver.find_element(By.ID, "global_filter").send_keys("日常交流")
    self.driver.find_element(By.ID, "search-btn").click()
    k = 0
    count = 0
    fail_count = 0
    while True:
        
        try:
            count = count + 1
            k = k + 1
            k = k % 3
            self.driver.find_element(By.CSS_SELECTOR, ".open-department .filter-option").click()
            self.driver.find_element(By.ID, "global_filter").click()
            self.driver.find_element(By.ID, "global_filter").clear()
            self.driver.find_element(By.ID, "global_filter").send_keys("日常交流")
            self.driver.find_element(By.ID, "search-btn").click()
            for j in range(k):
                self.driver.find_element(By.CSS_SELECTOR, ".fa-angle-right").click()
            log("第{}次 选课开始".format(count))
            elements = self.driver.find_elements_by_css_selector(".course-select")
            elements = [[i, element] for i, element in enumerate(elements)]
            random.shuffle(elements)
            log("element num:", len(elements), " page:", k)
            for i, element in elements:
                j = i + 1
                element.click()
                # 29 | click | css=.add-response .close-modal | 
                # self.vars["win2848"] = self.wait_for_window(2000)
                time.sleep(2)
                result = self.driver.find_element(By.CSS_SELECTOR, ".result-content")
                if result.text == "选课成功":
                    yag.send('xxxx', '选课脚本通知', result.text)
                    log("result", result.text)
                else:
                    log("第{}轮 {}-th result:".format(count, i), result.text)
                # result = self.driver.find_element(By.LINK_TEXT, "选课成功")
                # print("成功 result", result)
                self.driver.find_element(By.CSS_SELECTOR, ".close-modal").click()
        except :
            try:
                self.driver.find_element(By.CSS_SELECTOR, ".open-department .filter-option").click()
                # 24 | click | css=.odd:nth-child(1) .btn | 
                self.driver.find_element(By.ID, "global_filter").click()
                # 25 | click | css=.add-response .close-modal | 
                self.driver.find_element(By.ID, "global_filter").clear()
                self.driver.find_element(By.ID, "global_filter").send_keys("日常交流")
                self.driver.find_element(By.ID, "search-btn").click()
            except:
                fail_count = fail_count + 1
                log("{}-th 选课脚本崩了！！！".format(fail_count))
                if fail_count % 300 == 0:
                    yag.send('xxxx', '选课脚本通知', \
                        "{}-th 选课脚本崩了！！！".format(fail_count))
                    break
        time.sleep(5)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--log", type=str, default='logger.txt')
    args = parser.parse_args()
    logging.basicConfig(filename=args.log, level=logging.INFO)
    session_cnt = 0
    while True:
        session_cnt += 1
        log("{}-th new session".format(session_cnt))
        test = Test2()
        test.setup_method(None)
        test.test_2()
        test.teardown_method(None)
        log("session crash")
        yag.send('mail', '选课脚本通知', "{}-th 选课脚本崩了！！！".format(session_cnt))
        if session_cnt > 10:
            break
  
